20211122 Martix

1.JVM:java虚拟机，负责对外提供java的服务，创造的目的是让java通用所有平台。技术的难点在于内存资源的管理和Java对象生命周期的管理。从JVM的内存模型上看栈和堆是回收的资源的核心点，如何保证在垃圾回收的时候JVM不中断服务是技术追求的难点。从未来来看，量子存储是解决资源管理的重要手段，因为一个量子比特中可以存储超过传统单元的信息，那么势必会大大节省JVM本身所需要的空间同时也可以保证对外提供的服务可以不中断。

2.NIO:非阻塞式IO模型。IO模型的一种。IO不用阻塞，当数据准备好的时候会通知请求方，否则会轮询下去，技术难点在于轮询的选择，比如有一百个请求那么最差的条件下当某一个请求的数据准备好的时候可能需要需要轮询一百次才能发数据到请求方，这在时间上极大的浪费，如果能够给请求加上标签那么就可以很快速法送准备好的数据给到请求方，比如订阅模式广播模式等微服务解决方案。

3.并发编程（Multiply Thread ）：该技术的出现是为了节省计算所用的时间，比如以前用单车道一辆货车拉货到码头，现在是双车道拉货到码头，理论上来说可以节省一半的时间。技术难点在于线程的生命管理和避免免死锁问题，对于线程的生命管理可以用线程组来管理，比如主从模式来解决，避免死锁的话就需要给线程加上锁防止恶意竞争资源。从竞争的角度讲这里可以用博弈论中的大量参与者-寡头垄断模型来分析（大量参与者这个地方就相当于大量的线程，寡头形容只有一个的消费请求，总的资源有限，那么势必要采取不同的交易措施才能保证每个线程获益，这里获益值得是线程计算的结果都可以是有效的信息，同时要避免无序竞争——类比死锁问题，还没看完博弈论，后面接着分析。最希望的结果是双赢，最差的结果是纳什均衡）。

4.Spring和ORM框架：Spring沟通的是前端到后端的代码实现。Spring两个核心点AOP和IOC，AOP管理对象生命周期与对象装配，为实现管理与装配，加一个中间代理层（字节码增强），来实现所有对象的托管；IOC对象装配思路的改进。ORM沟通的是从后端具体的业务代码到数据库的数据，两个主流一个是hierarchy另一个是mybatis，技术难点是大批量的读取和修改数据，这一块可以用批量上传批量修改来解决以及优化数据库的数据结构，比图后面的分库分表读写分离等；

5.MySQL数据库和SQL：数据库的开发出来的目的之一是如果用有限的资源存储大量的数据，并且是持久化的储存数据。技术难点是增删改查时对数据的储存要求，常用的手段有加索引，索引常见的算法有红黑树、二叉树等。可以通过优化索引的算法结构，优化缓存，优化数据库引擎来实现提速。

6.分库分表：这个技术数段主要解决的是代码部分到数据库内部处理速度慢的问题，也起到了备份数据对抗风险的作用。可以水平拆分，垂直拆分和空间拆分三种方法。组要原则是大话小，多备份保证数据一致性和有效性。

7.RPC和微服务：RPC是远程过程调用，难点在于保证调用过程的有效性和数据传递的有效性，常见的RPC协议都定义了自己的报文和沟通机制。
微服务是通过吧传统服务拆成一个个小的模块，通过不同的模块来调用具体的服务，这样避免了服务器挂掉所有服务全部停止的生产事故。

8.分布式缓存：分布式缓存的出现是为了解决跨机器可拓展管理缓存的难题，主要用于大规模的网络应用，缓存的处理速度快于内存，因此对时间有严格要求的网络程序就需要分布式缓存的技术。难题在于如何保证数据有效性和一致性的问题，可通过应用分布式协议比如XA来保证数据的一致性有效性。（图8.1和8.2）

9.分布式消息队列：目的是高效管理从客户端接受来的请求。技术难点是保证消息能够不丢失并且完成请求后返回数据给请求方，可通过消息队列的集群部署来处理，跟请求放连接可通过令牌模式和广播模式来确定需要拿的数据在哪从而返回给请求方。







